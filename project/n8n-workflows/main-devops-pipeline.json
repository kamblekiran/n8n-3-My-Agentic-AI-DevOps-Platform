{
  "id": "main-devops-pipeline",
  "meta": {
    "instanceId": "mcp-devops-server-instance",
    "templateCredsSetupCompleted": true
  },
  "name": "Agentic DevOps Pipeline",
  "tags": [
    {
      "createdAt": "2024-01-15T10:00:00.000Z",
      "updatedAt": "2024-01-15T10:00:00.000Z",
      "id": "devops-automation",
      "name": "DevOps Automation"
    }
  ],
  "nodes": [
    {
      "id": "webhook-trigger",
      "name": "GitHub Webhook",
      "type": "n8n-nodes-base.webhook",
      "position": [240, 300],
      "webhookId": "devops-pipeline-trigger",
      "parameters": {
        "httpMethod": "POST",
        "path": "webhook-trigger",
        "responseMode": "responseNode",
        "options": {}
      },
      "typeVersion": 1
    },
    {
      "id": "pr-filter",
      "name": "Filter PR Events",
      "type": "n8n-nodes-base.if",
      "position": [460, 300],
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.action }}",
              "rightValue": "opened",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "condition-2", 
              "leftValue": "={{ $json.action }}",
              "rightValue": "synchronize",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "condition-3",
              "leftValue": "={{ $json.action }}",
              "rightValue": "reopened",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "typeVersion": 2
    },
    {
      "id": "code-review-agent",
      "name": "Code Review Agent",
      "type": "n8n-nodes-base.httpRequest",
      "position": [680, 180],
      "parameters": {
        "url": "={{ $env.MCP_SERVER_URL || 'http://localhost:3000' }}/agent/code-review",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.MCP_SERVER_TOKEN }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "bodyParameters": {
          "parameters": [
            {
              "name": "repository",
              "value": "={{ $json.repository.full_name }}"
            },
            {
              "name": "pr_number",
              "value": "={{ $json.number }}"
            },
            {
              "name": "diff_url",
              "value": "={{ $json.pull_request?.diff_url }}"
            },
            {
              "name": "base_sha",
              "value": "={{ $json.pull_request?.base?.sha }}"
            },
            {
              "name": "head_sha",
              "value": "={{ $json.pull_request?.head?.sha }}"
            },
            {
              "name": "llm_model",
              "value": "gpt-4"
            }
          ]
        },
        "options": {}
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "mcp-server-auth",
          "name": "MCP Server Auth"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "test-writer-agent",
      "name": "Test Writer Agent", 
      "type": "n8n-nodes-base.httpRequest",
      "position": [680, 420],
      "parameters": {
        "url": "={{ $env.MCP_SERVER_URL || 'http://localhost:3000' }}/agent/test-writer",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.MCP_SERVER_TOKEN }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "bodyParameters": {
          "parameters": [
            {
              "name": "repository",
              "value": "={{ $json.repository.full_name }}"
            },
            {
              "name": "pr_number",
              "value": "={{ $json.number }}"
            },
            {
              "name": "changed_files",
              "value": "={{ $json.pull_request?.changed_files || [] }}"
            },
            {
              "name": "llm_model",
              "value": "gpt-4"
            }
          ]
        },
        "options": {}
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "mcp-server-auth",
          "name": "MCP Server Auth"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "approval-gate",
      "name": "Approval Gate",
      "type": "n8n-nodes-base.if",
      "position": [900, 300],
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $('Code Review Agent').item.json.status }}",
              "rightValue": "approved",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ]
        },
        "options": {}
      },
      "typeVersion": 2
    },
    {
      "id": "build-predictor",
      "name": "Build Predictor Agent",
      "type": "n8n-nodes-base.httpRequest",
      "position": [1120, 300],
      "parameters": {
        "url": "={{ $env.MCP_SERVER_URL || 'http://localhost:3000' }}/agent/build-predictor",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.MCP_SERVER_TOKEN }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "bodyParameters": {
          "parameters": [
            {
              "name": "repository",
              "value": "={{ $json.repository.full_name }}"
            },
            {
              "name": "branch",
              "value": "={{ $json.pull_request?.head?.ref || 'main' }}"
            },
            {
              "name": "commit_sha",
              "value": "={{ $json.pull_request?.head?.sha }}"
            },
            {
              "name": "llm_model",
              "value": "gpt-4"
            }
          ]
        },
        "options": {}
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "mcp-server-auth",
          "name": "MCP Server Auth"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "docker-handler",
      "name": "Docker/K8s Handler",
      "type": "n8n-nodes-base.httpRequest",
      "position": [1340, 300],
      "parameters": {
        "url": "={{ $env.MCP_SERVER_URL || 'http://localhost:3000' }}/agent/docker-handler",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.MCP_SERVER_TOKEN }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "bodyParameters": {
          "parameters": [
            {
              "name": "repository",
              "value": "={{ $json.repository.full_name }}"
            },
            {
              "name": "commit_sha",
              "value": "={{ $json.pull_request?.head?.sha }}"
            },
            {
              "name": "build_prediction",
              "value": "={{ $('Build Predictor Agent').item.json }}"
            },
            {
              "name": "action",
              "value": "build_and_push"
            }
          ]
        },
        "options": {}
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "mcp-server-auth",
          "name": "MCP Server Auth"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "deploy-agent",
      "name": "Deploy Agent",
      "type": "n8n-nodes-base.httpRequest",
      "position": [1560, 300],
      "parameters": {
        "url": "={{ $env.MCP_SERVER_URL || 'http://localhost:3000' }}/agent/deploy",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.MCP_SERVER_TOKEN }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "bodyParameters": {
          "parameters": [
            {
              "name": "repository",
              "value": "={{ $json.repository.full_name }}"
            },
            {
              "name": "image_tag",
              "value": "={{ $('Docker/K8s Handler').item.json.image_tag }}"
            },
            {
              "name": "environment",
              "value": "staging"
            },
            {
              "name": "kubernetes_config",
              "value": "={{ $('Docker/K8s Handler').item.json.k8s_manifests }}"
            }
          ]
        },
        "options": {}
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "mcp-server-auth",
          "name": "MCP Server Auth"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "monitor-agent",
      "name": "Monitor Agent",
      "type": "n8n-nodes-base.httpRequest",
      "position": [1780, 300],
      "parameters": {
        "url": "={{ $env.MCP_SERVER_URL || 'http://localhost:3000' }}/agent/monitor",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.MCP_SERVER_TOKEN }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "bodyParameters": {
          "parameters": [
            {
              "name": "deployment_id",
              "value": "={{ $('Deploy Agent').item.json.deployment_id }}"
            },
            {
              "name": "environment",
              "value": "staging"
            },
            {
              "name": "monitoring_duration",
              "value": "300"
            }
          ]
        },
        "options": {}
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "mcp-server-auth",
          "name": "MCP Server Auth"
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "slack-notification",
      "name": "Slack Notification",
      "type": "n8n-nodes-base.httpRequest",
      "position": [1780, 480],
      "parameters": {
        "url": "={{ $env.MCP_SERVER_URL || 'http://localhost:3000' }}/notifications/slack",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "bodyParameters": {
          "parameters": [
            {
              "name": "channel",
              "value": "#devops-alerts"
            },
            {
              "name": "message",
              "value": "=🚀 DevOps Pipeline completed successfully for {{ $json.repository?.full_name || 'repository' }} PR #{{ $json.number || 'N/A' }}"
            },
            {
              "name": "deployment_url",
              "value": "={{ $('Deploy Agent').item.json.deployment_url }}"
            }
          ]
        },
        "options": {}
      },
      "typeVersion": 4.2
    },
    {
      "id": "response-node",
      "name": "Pipeline Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [2000, 300],
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"status\": \"success\",\n  \"pipeline_id\": \"pipeline-\" + $now,\n  \"agents_executed\": [\n    \"code-review\",\n    \"test-writer\", \n    \"build-predictor\",\n    \"docker-handler\",\n    \"deploy-agent\",\n    \"monitor-agent\"\n  ],\n  \"deployment_url\": $('Deploy Agent').item.json.deployment_url,\n  \"monitoring_dashboard\": $('Monitor Agent').item.json.dashboard_url\n} }}",
        "options": {}
      },
      "typeVersion": 1
    }
  ],
  "connections": {
    "GitHub Webhook": {
      "main": [
        [
          {
            "node": "Filter PR Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter PR Events": {
      "main": [
        [
          {
            "node": "Code Review Agent",
            "type": "main",
            "index": 0
          },
          {
            "node": "Test Writer Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Review Agent": {
      "main": [
        [
          {
            "node": "Approval Gate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test Writer Agent": {
      "main": [
        [
          {
            "node": "Approval Gate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Approval Gate": {
      "main": [
        [
          {
            "node": "Build Predictor Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Predictor Agent": {
      "main": [
        [
          {
            "node": "Docker/K8s Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Docker/K8s Handler": {
      "main": [
        [
          {
            "node": "Deploy Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deploy Agent": {
      "main": [
        [
          {
            "node": "Monitor Agent",
            "type": "main",
            "index": 0
          },
          {
            "node": "Slack Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Monitor Agent": {
      "main": [
        [
          {
            "node": "Pipeline Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "triggerCount": 1,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "1"
}